services:
  db:
    image: ghcr.io/wonsky1/topn-db:prod
    restart: unless-stopped
    container_name: topn-db-prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      - com.centurylinklabs.watchtower.enable=true
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://0.0.0.0:8000/health')"]
      interval: 120s
      timeout: 10s
      retries: 5
      start_period: 10s
    ports:
      - ${DB_SERVICE_PORT:-11}:8000

  telegram:
    image: ghcr.io/wonsky1/topn-telegram:prod
    restart: unless-stopped
    container_name: topn-telegram-prod
    depends_on:
      db:
        condition: service_healthy
    labels:
      - com.centurylinklabs.watchtower.enable=true

  worker:
    image: ghcr.io/wonsky1/topn-worker:prod
    restart: unless-stopped
    container_name: topn-worker-prod
    depends_on:
      db:
        condition: service_healthy
    labels:
      - com.centurylinklabs.watchtower.enable=true

  postgres:
    image: postgres:16
    restart: unless-stopped
    container_name: topn-postgres-prod
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydatabase
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - ${DB_SERVICE_PORT:-12}:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d mydatabase"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    container_name: topn-redis-prod
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:
